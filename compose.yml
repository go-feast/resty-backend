version: '3.9'

networks:
  api:

x-service-volume:  &service-volume
  type: bind
  source: ./
  target: /app



services:
  order-consumer:
    depends_on:
      - kafka
      - jaeger
      - prometheus
      - postgres-order
    env_file:
      - dev.env
    environment:
      POSTGRES_HOST: postgres-order:5432
      METRICS_HOST: order-consumer
      METRICS_PORT: 8083
      POSTGRES_DB: order
    build:
      dockerfile: Dockerfile
      context: .
      target: binary
      args:
        METRIC_PORT: 8083
        BUILD_TARGET: consumer
        BUILD_PROJECT: order
    restart: on-failure
    ports:
      - "8083:8083" # metric service port. Make sure u change it in deployment/development/external/prometheus.yml
    healthcheck:
      test: ["CMD", "curl", "http://order-consumer:8083/healthz"]
      retries: 10
      interval: 5s
    networks:
      - api

  order-server:
    depends_on:
      - kafka
      - jaeger
      - prometheus
      - postgres-order
    env_file:
      - dev.env
    environment:
      POSTGRES_HOST: postgres-order:5432
      POSTGRES_DB: order
      SERVER_HOST: order-server
      SERVER_PORT: 8080
      METRICS_HOST: order-server
      METRICS_PORT: 8081
      SERVER_WRITETIMEOUT: 10s
      SERVER_READTIMEOUT: 5s
      SERVER_IDLETIMEOUT: 5s
    build:
      dockerfile: Dockerfile
      context: .
      target: binary
      args:
        SERVICE_PORT: 8080
        METRIC_PORT: 8081
        BUILD_TARGET: server
        BUILD_PROJECT: order
    restart: on-failure
    ports:
      - "8080:8080" # service port
      - "8081:8081" # metric service port
    healthcheck:
      test: ["CMD", "curl", "http://order-server:8080/health" ]
      interval: 5s
      retries: 10
    networks:
      - api

  postgres-order:
    image: postgres:15
    ports:
      - "5432:5432"
    env_file:
      - dev.env
    environment:
      POSTGRES_DB: order
    #    volumes:
    #      - 'pgsql:/var/lib/postgresql/data'
    networks:
      - api
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready", "-d", "db_prod" ]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 80s

  restaurant-server:
    depends_on:
      - jaeger
      - prometheus
      - postgres-restaurant
    env_file:
      - dev.env
    environment:
      POSTGRES_HOST: postgres-restaurant:5433
      SERVER_HOST: restaurant-server
      SERVER_PORT: 8080
      METRICS_HOST: restaurant-server
      METRICS_PORT: 8081
      SERVER_WRITETIMEOUT: 10s
      SERVER_READTIMEOUT: 5s
      SERVER_IDLETIMEOUT: 5s
      POSTGRES_DB: restaurant
    build:
      dockerfile: Dockerfile
      context: .
      target: binary
      args:
        SERVICE_PORT: 8090
        METRIC_PORT: 8091
        BUILD_TARGET: server
        BUILD_PROJECT: restaurant
    restart: on-failure
    ports:
      - "8090:8090" # service port
      - "8091:8091" # metric service port
    healthcheck:
      test: [ "CMD", "curl", "restaurant-server:8090/health" ]
      interval: 5s
      retries: 10
    networks:
      - api

  postgres-restaurant:
    image: postgres:15
    ports:
      - "5433:5432"
    env_file:
      - dev.env
    environment:
      POSTGRES_DB: restaurant
    #    volumes:
    #      - 'pgsql:/var/lib/postgresql/data'
    networks:
      - api
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready", "-d", "db_prod" ]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 80s

  prometheus:
    image: prom/prometheus:v2.40.4
    ports:
      - "9090:9090"
    volumes:
      - ./deployment/development/external/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    healthcheck:
      test: [ "CMD", "wget", "http://prometheus:9090" ]
      interval: 10s
      timeout: 15s
      retries: 10
      start_period: 40s

  jaeger:
    hostname: jaeger
    image: jaegertracing/all-in-one
    environment:
      COLLECTOR_OTLP_ENABLED: true
    ports:
      - "16686:16686" # serve frontend
      - "14269:14269" # healthcheck
      - "4318:4318" # accept OpenTelemetry Protocol (OTLP) over HTTP
    healthcheck:
      test: [ "CMD", "curl", "-X", "GET", "jaeger:14269" ] # jaeger collector health check ping
      interval: 1s
      timeout: 3s
      retries: 60
    networks:
      - api

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.1
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - api

  kafka:
    image: confluentinc/cp-kafka:7.3.1
    restart: unless-stopped
    depends_on:
      - zookeeper
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    networks:
      - api